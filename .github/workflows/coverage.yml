name: Test Coverage

on:
  pull_request:
    branches:
      - "**"

permissions:
  contents: read
  pull-requests: write

jobs:
  coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9.3.0
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run coverage on PR
        run: ./node_modules/.bin/vitest run --coverage
        continue-on-error: true

      - name: Save PR coverage
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            cp coverage/coverage-summary.json coverage-pr.json
          else
            echo '{"total":{"lines":{"pct":0},"statements":{"pct":0},"functions":{"pct":0},"branches":{"pct":0}}}' > coverage-pr.json
          fi

      - name: Upload PR coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-pr
          path: coverage-pr.json
          retention-days: 1

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          submodules: 'recursive'

      - name: Install dependencies on base
        run: pnpm install

      - name: Run coverage on base
        run: ./node_modules/.bin/vitest run --coverage
        continue-on-error: true

      - name: Save base coverage
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            cp coverage/coverage-summary.json coverage-base.json
          else
            echo '{"total":{"lines":{"pct":0},"statements":{"pct":0},"functions":{"pct":0},"branches":{"pct":0}}}' > coverage-base.json
          fi

      - name: Upload base coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-base
          path: coverage-base.json
          retention-days: 1

      - name: Download PR coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-pr

      - name: Download base coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-base

      - name: Compare coverage and comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let prCoverage, baseCoverage;

            try {
              prCoverage = JSON.parse(fs.readFileSync('coverage-pr.json', 'utf8'));
            } catch (e) {
              prCoverage = { total: { lines: { pct: 0 }, statements: { pct: 0 }, functions: { pct: 0 }, branches: { pct: 0 } } };
            }

            try {
              baseCoverage = JSON.parse(fs.readFileSync('coverage-base.json', 'utf8'));
            } catch (e) {
              baseCoverage = { total: { lines: { pct: 0 }, statements: { pct: 0 }, functions: { pct: 0 }, branches: { pct: 0 } } };
            }

            const prTotal = prCoverage.total;
            const baseTotal = baseCoverage.total;

            const formatDelta = (current, base) => {
              const delta = current - base;
              const sign = delta > 0 ? '+' : '';
              const emoji = delta > 0 ? '🟢' : delta < 0 ? '🔴' : '⚪';
              return `${emoji} ${sign}${delta.toFixed(2)}%`;
            };

            const formatPct = (value) => `${value.toFixed(2)}%`;

            const lineDelta = prTotal.lines.pct - baseTotal.lines.pct;
            const stmtDelta = prTotal.statements.pct - baseTotal.statements.pct;
            const funcDelta = prTotal.functions.pct - baseTotal.functions.pct;
            const branchDelta = prTotal.branches.pct - baseTotal.branches.pct;

            const comment = `## 📊 Test Coverage Report

            | Metric | Base | PR | Change |
            |--------|------|-------|--------|
            | **Lines** | ${formatPct(baseTotal.lines.pct)} | ${formatPct(prTotal.lines.pct)} | ${formatDelta(prTotal.lines.pct, baseTotal.lines.pct)} |
            | **Statements** | ${formatPct(baseTotal.statements.pct)} | ${formatPct(prTotal.statements.pct)} | ${formatDelta(prTotal.statements.pct, baseTotal.statements.pct)} |
            | **Functions** | ${formatPct(baseTotal.functions.pct)} | ${formatPct(prTotal.functions.pct)} | ${formatDelta(prTotal.functions.pct, baseTotal.functions.pct)} |
            | **Branches** | ${formatPct(baseTotal.branches.pct)} | ${formatPct(prTotal.branches.pct)} | ${formatDelta(prTotal.branches.pct, baseTotal.branches.pct)} |

            ${lineDelta >= 0 ? '✅ Coverage maintained or improved!' : '⚠️ Coverage decreased'}`;

            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('📊 Test Coverage Report')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
